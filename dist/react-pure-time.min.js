(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory(require("react"));
	else if(typeof define === 'function' && define.amd)
		define(["react"], factory);
	else {
		var a = typeof exports === 'object' ? factory(require("react")) : factory(root["React"]);
		for(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];
	}
})(typeof self !== 'undefined' ? self : this, function(__WEBPACK_EXTERNAL_MODULE_1__) {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.format = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = __webpack_require__(1);

var _react2 = _interopRequireDefault(_react);

var _format = __webpack_require__(2);

var _format2 = _interopRequireDefault(_format);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var msAmountIn = {
  second: 1000,
  minute: 1000 * 60,
  hour: 1000 * 60 * 60,
  day: 1000 * 60 * 60 * 24,
  week: 1000 * 60 * 60 * 24 * 7
};

var Time = function (_Component) {
  _inherits(Time, _Component);

  function Time(props) {
    _classCallCheck(this, Time);

    var _this = _possibleConstructorReturn(this, (Time.__proto__ || Object.getPrototypeOf(Time)).call(this, props));

    _this.updateRelativeTime = _this.updateRelativeTime.bind(_this);
    _this.checkForRelativeTimeProps = _this.checkForRelativeTimeProps.bind(_this);
    _this.state = {
      relativeTime: ''
    };
    _this.interval = null;
    _this.currentUnit = '';
    return _this;
  }

  _createClass(Time, [{
    key: 'componentWillMount',
    value: function componentWillMount() {
      this.checkForRelativeTimeProps(this.props);
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      this.checkForRelativeTimeProps(nextProps);
    }
  }, {
    key: 'getRelativeTimeString',
    value: function getRelativeTimeString(time, absTime, unit, isFuture) {
      var unitDecl = absTime % 100 === 1 || absTime % 10 === 1 ? unit : unit + 's';

      if (unit === 'second' && time === 0) return 'just now';
      if (unit === 'year' && time === 0) return 'this year';
      if (unit === 'year' && time === 1) return 'last year';

      return (isFuture ? 'will come in' : '') + ' ' + absTime + ' ' + unitDecl + ' ' + (isFuture ? '' : 'ago');
    }
  }, {
    key: 'getRelativeTimeDiff',
    value: function getRelativeTimeDiff(value) {
      var date = value;
      var now = new Date();

      var dateMs = date.getTime();
      var nowMs = now.getTime();

      var ms = nowMs - dateMs;

      var years = now.getFullYear() - date.getFullYear();
      var round = Math[ms > 0 ? 'floor' : 'ceil'];

      return {
        ms: ms,
        seconds: round(ms / msAmountIn.second),
        minutes: round(ms / msAmountIn.minute),
        hours: round(ms / msAmountIn.hour),
        days: round(ms / msAmountIn.day),
        weeks: round(ms / msAmountIn.week),
        months: years * 12 + now.getMonth() - date.getMonth(),
        years: years
      };
    }
  }, {
    key: 'getInterval',
    value: function getInterval() {
      if (!this.currentUnit.length) return 10;
      if (!msAmountIn[this.currentUnit]) return msAmountIn.week;
      return msAmountIn[this.currentUnit];
    }
  }, {
    key: 'checkForRelativeTimeProps',
    value: function checkForRelativeTimeProps(props) {
      var _this2 = this;

      if (props.relativeTime && this.isDate(props.value)) {
        var date = new Date(props.value);
        this.updateRelativeTime(date, props.unit);

        if (this.interval) window.clearInterval(this.interval);
        this.interval = setInterval(function () {
          return _this2.updateRelativeTime(date, props.unit);
        }, this.getInterval());
      }
    }
  }, {
    key: 'updateRelativeTime',
    value: function updateRelativeTime(date, unit) {
      var diff = this.getRelativeTimeDiff(date);

      var prevUnit = this.currentUnit;
      this.currentUnit = unit || this.bestFit(diff);
      if (this.currentUnit !== prevUnit) {
        this.checkForRelativeTimeProps(this.props);
        return false;
      }

      var time = diff[this.currentUnit + 's'];
      var absTime = Math.abs(time);
      var isFuture = time < 0;

      if (this.currentUnit === 'second') {
        var normTime = 45;
        if (absTime < 45) normTime = 20;
        if (absTime < 20) normTime = 5;
        if (absTime < 5) normTime = 0;
        if (absTime === 0) normTime = 0;
        time = isFuture ? -normTime : normTime;
        absTime = Math.abs(time);
      }

      this.setState({
        relativeTime: this.getRelativeTimeString(time, absTime, this.currentUnit, isFuture)
      });
      return true;
    }
  }, {
    key: 'bestFit',
    value: function bestFit(diff) {
      var seconds = Math.abs(diff.seconds);
      var minutes = Math.abs(diff.minutes);
      var hours = Math.abs(diff.hours);
      var days = Math.abs(diff.days);
      var weeks = Math.abs(diff.weeks);
      var months = Math.abs(diff.months);
      var years = Math.abs(diff.years);

      switch (true) {
        case years > 0 && months > 11:
          return 'year';
        case months > 0 && days > 27:
          return 'month';
        case weeks > 0 && days > 6:
          return 'week';
        case days > 0 && hours > 23:
          return 'day';
        case hours > 0 && minutes > 59:
          return 'hour';
        case minutes > 0 && seconds > 59:
          return 'minute';
        default:
          return 'second';
      }
    }
  }, {
    key: 'isDate',
    value: function isDate(value) {
      var testDate = new Date(value);
      if (Object.prototype.toString.call(testDate) !== '[object Date]') return false;
      return !isNaN(testDate.getTime());
    }
  }, {
    key: 'render',
    value: function render() {
      var _props = this.props,
          value = _props.value,
          format = _props.format,
          placeholder = _props.placeholder,
          className = _props.className,
          utc = _props.utc,
          relativeTime = _props.relativeTime;

      return _react2.default.createElement(
        'span',
        { className: className },
        this.isDate(value) ? relativeTime ? this.state.relativeTime : (0, _format2.default)(new Date(value), format, utc) : placeholder
      );
    }
  }]);

  return Time;
}(_react.Component);

Time.defaultProps = {
  placeholder: '—',
  format: 'd.m.Y H:i',
  utc: false
};
var format = exports.format = _format2.default;
exports.default = Time;

/***/ }),
/* 1 */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE_1__;

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = date;
function date(value, format) {
  var utc = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

  var jsdate = new Date(value);

  var txtWords = ['Sun', 'Mon', 'Tues', 'Wednes', 'Thurs', 'Fri', 'Satur', 'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];

  var f = {};
  var formatChr = /\\?(.?)/gi;

  var formatChrCb = function formatChrCb(t, s) {
    if (f[t]) return f[t]();
    return s;
  };

  var zeroPad = function zeroPad(n, c) {
    var newN = String(n);
    while (newN.length < c) {
      newN = '0' + newN;
    }
    return newN;
  };

  f = {
    // Day
    d: function d() {
      // Day of month w/leading 0; 01..31
      return zeroPad(f.j(), 2);
    },
    D: function D() {
      // Shorthand day name; Mon...Sun
      return f.l().slice(0, 3);
    },
    j: function j() {
      // Day of month; 1..31
      if (utc) return jsdate.getUTCDate();
      return jsdate.getDate();
    },
    l: function l() {
      // Full day name; Monday...Sunday
      return txtWords[f.w()] + 'day';
    },
    N: function N() {
      // ISO-8601 day of week; 1[Mon]..7[Sun]
      return f.w() || 7;
    },
    S: function S() {
      // Ordinal suffix for day of month; st, nd, rd, th
      var j = f.j();
      var i = j % 10;
      if (i <= 3 && parseInt(j % 100 / 10, 10) === 1) {
        i = 0;
      }
      return ['st', 'nd', 'rd'][i - 1] || 'th';
    },
    w: function w() {
      // Day of week; 0[Sun]..6[Sat]
      if (utc) return jsdate.getUTCDay();
      return jsdate.getDay();
    },
    z: function z() {
      // Day of year; 0..365
      var a = new Date(f.Y(), f.n() - 1, f.j());
      var b = new Date(f.Y(), 0, 1);
      return Math.round((a - b) / 864e5);
    },


    // Week
    W: function W() {
      // ISO-8601 week number
      var a = new Date(f.Y(), f.n() - 1, f.j() - f.N() + 3);
      var b = void 0;
      if (utc) {
        b = new Date(a.getUTCFullYear(), 0, 4);
      } else {
        b = new Date(a.getFullYear(), 0, 4);
      }
      return zeroPad(1 + Math.round((a - b) / 864e5 / 7), 2);
    },


    // Month
    F: function F() {
      // Full month name; January...December
      return txtWords[6 + f.n()];
    },
    m: function m() {
      // Month w/leading 0; 01...12
      return zeroPad(f.n(), 2);
    },
    M: function M() {
      // Shorthand month name; Jan...Dec
      return f.F().slice(0, 3);
    },
    n: function n() {
      // Month; 1...12
      if (utc) return jsdate.getUTCMonth() + 1;
      return jsdate.getMonth() + 1;
    },
    t: function t() {
      // Days in month; 28...31
      if (utc) return new Date(f.Y(), f.n(), 0).getUTCDate();
      return new Date(f.Y(), f.n(), 0).getDate();
    },


    // Year
    L: function L() {
      // Is leap year?; 0 or 1
      var j = f.Y();
      return j % 4 === 0 && j % 100 !== 0 || j % 400 === 0 ? 1 : 0;
    },
    o: function o() {
      // ISO-8601 year
      var n = f.n();
      var W = parseInt(f.W(), 10);
      var Y = f.Y();
      return Y + (n === 12 && W < 9 ? 1 : n === 1 && W > 9 ? -1 : 0);
    },
    Y: function Y() {
      // Full year; e.g. 1980...2010
      if (utc) return jsdate.getUTCFullYear();
      return jsdate.getFullYear();
    },
    y: function y() {
      // Last two digits of year; 00...99
      return f.Y().toString().slice(-2);
    },


    // Time
    a: function a() {
      // am or pm
      if (utc) return jsdate.getUTCHours() > 11 ? 'pm' : 'am';
      return jsdate.getHours() > 11 ? 'pm' : 'am';
    },
    A: function A() {
      // AM or PM
      return f.a().toUpperCase();
    },
    B: function B() {
      // Swatch Internet time; 000..999
      var H = jsdate.getUTCHours() * 36e2;
      // Hours
      var i = jsdate.getUTCMinutes() * 60;
      // Minutes
      // Seconds
      var s = jsdate.getUTCSeconds();
      return zeroPad(Math.floor((H + i + s + 36e2) / 86.4) % 1e3, 3);
    },
    g: function g() {
      // 12-Hours; 1..12
      return f.G() % 12 || 12;
    },
    G: function G() {
      // 24-Hours; 0..23
      if (utc) return jsdate.getUTCHours();
      return jsdate.getHours();
    },
    h: function h() {
      // 12-Hours w/leading 0; 01..12
      return zeroPad(f.g(), 2);
    },
    H: function H() {
      // 24-Hours w/leading 0; 00..23
      return zeroPad(f.G(), 2);
    },
    i: function i() {
      // Minutes w/leading 0; 00..59
      if (utc) return zeroPad(jsdate.getUTCMinutes(), 2);
      return zeroPad(jsdate.getMinutes(), 2);
    },
    s: function s() {
      // Seconds w/leading 0; 00..59
      if (utc) return zeroPad(jsdate.getUTCSeconds(), 2);
      return zeroPad(jsdate.getSeconds(), 2);
    },
    u: function u() {
      // Microseconds; 000000-999000
      if (utc) return zeroPad(jsdate.getUTCMilliseconds() * 1000, 6);
      return zeroPad(jsdate.getMilliseconds() * 1000, 6);
    },


    // Timezone
    e: function e() {
      // Timezone identifier; e.g. Atlantic/Azores, ...
      // The following works, but requires inclusion of the very large
      // timezone_abbreviations_list() function.
      /*              return that.date_default_timezone_get();
       */
      throw new Error('Not supported\n        (see source code of date() for timezone on how to add support)');
    },
    I: function I() {
      // DST observed?; 0 or 1
      // Compares Jan 1 minus Jan 1 UTC to Jul 1 minus Jul 1 UTC.
      var a = new Date(f.Y(), 0);
      // Jan 1
      var c = Date.UTC(f.Y(), 0);
      // Jan 1 UTC
      var b = new Date(f.Y(), 6);
      // Jul 1
      // Jul 1 UTC
      var d = Date.UTC(f.Y(), 6);
      return a - c !== b - d ? 1 : 0;
    },
    O: function O() {
      // Difference to GMT in hour format; e.g. +0200
      var tzo = jsdate.getTimezoneOffset();
      var a = Math.abs(tzo);
      return (tzo > 0 ? '-' : '+') + zeroPad(Math.floor(a / 60) * 100 + a % 60, 4);
    },
    P: function P() {
      // Difference to GMT w/colon; e.g. +02:00
      var O = f.O();
      return O.substr(0, 3) + ':' + O.substr(3, 2);
    },
    T: function T() {
      if (utc) return 'UTC';
      return 'LOCAL';
    },
    Z: function Z() {
      // Timezone offset in seconds (-43200...50400)
      return -jsdate.getTimezoneOffset() * 60;
    },


    // Full Date/Time
    c: function c() {
      // ISO-8601 date.
      return 'Y-m-d\\TH:i:sP'.replace(formatChr, formatChrCb);
    },
    r: function r() {
      // RFC 2822
      return 'D, d M Y H:i:s O'.replace(formatChr, formatChrCb);
    },
    U: function U() {
      // Seconds since UNIX epoch
      return jsdate / 1000 | 0;
    }
  };

  return format.replace(formatChr, formatChrCb);
}
// based on phpjs date format library

/***/ })
/******/ ]);
});